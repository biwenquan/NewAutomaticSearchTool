from functools import reduce
import math
import random
from MILPSbox import *
from random import *

ST = [\
#s1
[\
(-1, 0, -1, 0, -1, -1, 0, -1, 5, -1, 0),\
(-3, -1, 3, 0, 1, -1, -1, -3, 3, 5, 0),\
(1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 0),\
(-1, -3, -1, 0, -1, 1, 1, -1, 3, 4, 0),\
(-1, 2, 2, 2, -1, 1, -3, -1, 0, 6, 0),\
(1, 0, -1, -1, 4, 3, 3, 2, -1, -2, 0),\
(2, 0, -1, -1, 0, -1, -1, -3, 4, 2, 0),\
(-3, -1, 1, -2, 2, -1, -2, 1, 4, 3, 0),\
(1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, -3, 0, -1, 1, 2, 2, 0),\
(2, -1, 1, -1, 0, 2, 1, 0, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 0, 1, -2, 0, 0),\
(-1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0),\
(-1, -3, 1, 0, -2, -1, 1, -1, 4, 3, 0),\
(0, 1, 0, -1, 0, 0, 0, 1, 1, -1, 0),\
(-1, 0, -1, 0, 1, 1, 0, -1, 3, -1, 0),\
(1, -1, -1, 1, 0, 1, 0, 0, 2, -1, 0),\
(-1, -1, 1, 0, -1, 1, -1, -2, 3, 2, 0),\
(-1, 1, -1, 0, 0, 0, -2, -1, 3, 1, 0),\
(1, -2, -1, -1, 2, -1, -2, 1, 5, 0, 0),\
(1, 0, 1, 1, 0, -1, -1, 0, 2, -1, 0),\
(-1, 0, 1, 0, 2, 1, 2, 1, -1, 0, 0)],

#s2
[\
(-1, 0, -1, 0, -1, -1, -1, 0, 5, -1, 0),\
(-3, -1, 3, 0, 1, -1, -3, -1, 3, 5, 0),\
(1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 0),\
(-1, -3, -1, 0, -1, 1, -1, 1, 3, 4, 0),\
(-1, 2, 2, 2, -1, 1, -1, -3, 0, 6, 0),\
(1, 0, -1, -1, 4, 3, 2, 3, -1, -2, 0),\
(2, 0, -1, -1, 0, -1, -3, -1, 4, 2, 0),\
(-4, -1, 1, -2, 3, -1, 1, -2, 4, 4, 0),\
(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, -3, 0, 1, -1, 2, 2, 0),\
(2, -1, -1, 1, 0, 2, 0, 1, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 1, 0, -2, 0, 0),\
(0, 1, 0, 0, 1, 0, 1, 2, -1, -1, 0),\
(-1, -3, 2, 0, -2, -1, -2, 1, 4, 4, 0),\
(1, -4, 1, -1, 2, 4, 0, 2, 1, 1, 0),\
(0, 1, 0, -1, 0, 0, 1, 0, 1, -1, 0),\
(-1, 1, -1, 0, 0, 0, -1, -2, 3, 1, 0),\
(-1, -1, 1, 0, -1, 1, -2, -1, 3, 2, 0),\
(-1, 0, -1, 0, 1, 1, -1, -2, 3, 1, 0),\
(1, 0, 1, 1, 0, -1, -3, -1, 2, 2, 0),\
(1, -1, 1, -1, 0, 1, 0, 0, 2, -1, 0),\
(1, -2, -1, -1, 2, -1, 1, -2, 5, 0, 0)],

#s3
[\
(0, 0, -1, -1, -1, -1, -1, -1, 5, 0, 0),\
(-3, -1, 3, 0, -1, 1, -3, -1, 3, 5, 0),\
(1, 1, 0, 0, 1, 0, 1, 0, -1, -1, 0),\
(-1, -3, -1, 0, 1, -1, -1, 1, 3, 4, 0),\
(-1, 2, 2, 2, -3, -1, -1, 1, 0, 6, 0),\
(1, 0, -1, -1, 3, 4, 2, 3, -1, -2, 0),\
(-4, -1, 1, -2, -2, 3, 1, -1, 4, 4, 0),\
(-1, 1, -1, 0, 0, 0, -1, 0, 3, -1, 0),\
(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(2, 0, -1, -1, -1, 0, -3, -1, 4, 2, 0),\
(0, -1, 0, 3, -1, -3, 1, 0, 2, 2, 0),\
(0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0),\
(0, 1, 0, -1, 0, 0, 1, 0, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 1, 0, -2, 0, 0),\
(2, -1, -1, 1, 1, 0, 0, 2, 1, -1, 0),\
(-1, -3, 0, 0, 1, -1, -1, -1, 4, 2, 0),\
(0, 0, 0, 0, 2, 2, 1, 1, -1, -1, 0),\
(2, -2, 2, -2, 1, 1, 0, 3, 2, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(-1, -3, -1, -2, 0, 1, 0, 2, 4, 2, 0),\
(-1, -1, 1, 0, -1, -1, -2, 1, 3, 2, 0),\
(-1, 1, -1, 2, -1, 3, -1, -3, 3, 3, 0),\
(2, 1, 2, 2, -1, -3, 0, -1, 1, 2, 0),\
(-1, 0, -1, 0, -2, -1, -1, -1, 5, 1, 0),\
(-1, 0, -1, 0, 0, 1, -1, 1, 3, -1, 0),\
(0, -1, 1, 1, -1, 1, -4, -1, 3, 3, 0)],

#s4
[\
(-1, 0, -1, 0, -1, 0, -1, -1, 5, -1, 0),\
(-3, -1, 3, 0, -1, -1, 1, -3, 3, 5, 0),\
(1, 1, 0, 0, 0, 1, 0, 1, -1, -1, 0),\
(-1, -3, -1, 0, 1, 1, -1, -1, 3, 4, 0),\
(-1, 2, 2, 2, 1, -3, -1, -1, 0, 6, 0),\
(1, 0, -1, -1, 3, 3, 4, 2, -1, -2, 0),\
(2, 0, -1, -1, -1, -1, 0, -3, 4, 2, 0),\
(-3, -1, 1, -2, -1, -2, 2, 1, 4, 3, 0),\
(1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, 0, -1, -3, 1, 2, 2, 0),\
(2, -1, 1, -1, 2, 1, 0, 0, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 0, 1, -2, 0, 0),\
(0, 1, 0, 0, 0, 2, 1, 1, -1, -1, 0),\
(-1, -3, 2, 0, -1, 1, -2, -2, 4, 4, 0),\
(0, 1, 0, -1, 0, 0, 0, 1, 1, -1, 0),\
(-1, 1, -1, 0, 0, -2, 0, -1, 3, 1, 0),\
(1, -1, -1, 1, 1, 0, 0, 0, 2, -1, 0),\
(-1, -1, -1, -2, 1, 0, 2, 1, 3, 0, 0),\
(-2, -1, 1, 0, 1, -1, -1, -2, 3, 3, 0),\
(1, 0, 1, 1, -1, -1, 0, 0, 2, -1, 0),\
(-2, -1, -1, 0, -1, -1, 1, 0, 3, 3, 0),\
(-1, 0, -1, 0, 1, -2, 1, -1, 3, 1, 0),\
(0, 0, 0, 0, 1, 1, 1, 0, 0, -1, 0)],

#s5
[\
(0, 0, -1, -1, -1, -1, -1, -1, 5, 0, 0),\
(-3, -1, 3, 0, -1, 1, -1, -3, 3, 5, 0),\
(1, 1, 0, 0, 1, 0, 0, 1, -1, -1, 0),\
(-1, -3, -1, 0, 1, -1, 1, -1, 3, 4, 0),\
(-1, 2, 2, 2, -3, -1, 1, -1, 0, 6, 0),\
(1, 0, -1, -1, 3, 4, 3, 2, -1, -2, 0),\
(-4, -1, 1, -2, -2, 3, -1, 1, 4, 4, 0),\
(1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(-1, 1, -1, 0, 0, 0, 0, -1, 3, -1, 0),\
(2, 0, -1, -1, -1, 0, -1, -3, 4, 2, 0),\
(0, 2, 0, 1, 3, 1, -1, 1, -1, -1, 0),\
(0, -1, 0, 3, -1, -3, 0, 1, 2, 2, 0),\
(0, 1, 0, -1, 0, 0, 0, 1, 1, -1, 0),\
(-1, 0, 0, 0, 1, -1, -1, -1, 4, -1, 0),\
(1, 2, 1, 1, -1, 0, 0, 0, -1, 1, 0),\
(2, -1, 1, -1, 1, 0, 2, 0, 1, -1, 0),\
(1, 0, 2, 1, -1, -3, -2, 0, 3, 2, 0),\
(1, -1, -1, 1, 0, 0, 1, 0, 2, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(-1, -1, 1, 0, -1, -1, 1, -1, 3, 1, 0),\
(-1, -2, -1, -2, -1, 1, 1, 0, 4, 2, 0),\
(0, 0, 0, 0, 2, 2, 1, 1, -1, -1, 0),\
(-1, -1, -1, 2, -2, -1, -1, 0, 4, 2, 0),\
(0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0),\
(-1, 0, -1, 0, -2, 1, 1, -1, 3, 1, 0),\
(0, -1, 1, 1, -1, 1, -1, -1, 3, 0, 0)],

#s6
[\
(-1, -2, -1, 0, -1, 0, -1, -1, 5, 1, 0),\
(1, 1, 0, 0, 0, 1, 0, 1, -1, -1, 0),\
(-1, 1, 1, 0, 0, -2, 0, -1, 1, 3, 0),\
(-1, -3, 0, 0, -1, 2, 1, -1, 2, 4, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, 0, 0, 0, 2, 2, 1, 1, -1, -1, 0),\
(0, -1, 0, 3, -3, -1, 0, 1, 2, 2, 0),\
(1, -2, -1, -1, 2, -2, -2, -5, 6, 6, 0),\
(1, -1, 1, -2, 2, -1, 1, 2, 2, -1, 0),\
(1, 2, 1, 1, 0, 1, -1, 0, -1, 0, 0),\
(-4, -1, 1, -2, 3, -2, -1, 1, 4, 4, 0),\
(-1, 1, -1, 0, 0, 0, 0, -1, 3, -1, 0),\
(1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(2, -1, -1, 1, 0, 1, 2, 0, 1, -1, 0),\
(1, 2, 1, 1, 0, -1, 0, 0, -1, 1, 0),\
(0, 1, 0, 0, 0, 1, 0, 0, 0, -1, 0),\
(-1, -3, 1, 0, -2, 1, -1, -1, 4, 3, 0),\
(0, 1, 0, -1, 0, 0, 0, 1, 1, -1, 0),\
(0, -2, -2, -1, -1, 0, 2, -1, 4, 3, 0),\
(0, -1, 1, -1, -1, -1, 1, -1, 4, 0, 0),\
(-1, 0, -1, 0, 1, 0, 1, -1, 3, -1, 0),\
(-2, -1, 1, 3, -2, -1, 2, 0, 1, 4, 0),\
(1, 0, 1, 1, 0, -1, -1, 0, 2, -1, 0),\
(0, 0, -1, -1, -1, -1, -1, -1, 5, 0, 0),\
(-1, 1, -3, 4, 3, -3, -3, -1, 5, 5, 0),\
(1, -1, 1, -1, 0, 0, 1, 0, 2, -1, 0),\
(-1, -1, 1, 0, 1, -1, -1, -1, 3, 1, 0)],

#s7
[\
(-1, 0, -1, 0, -1, -1, -1, 0, 5, -1, 0),\
(-3, -1, 3, 0, 1, -1, -3, -1, 3, 5, 0),\
(1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 0),\
(-1, -3, -1, 0, -1, 1, -1, 1, 3, 4, 0),\
(-1, 2, 2, 2, -1, 1, -1, -3, 0, 6, 0),\
(1, 0, -1, -1, 4, 3, 2, 3, -1, -2, 0),\
(2, 0, -1, -1, 0, -1, -3, -1, 4, 2, 0),\
(-4, -1, 1, -2, 3, -1, 1, -2, 4, 4, 0),\
(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, -3, 0, 1, -1, 2, 2, 0),\
(2, -1, -1, 1, 0, 2, 0, 1, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 1, 0, -2, 0, 0),\
(0, 1, 0, 0, 1, 0, 1, 2, -1, -1, 0),\
(-1, -3, 2, 0, -2, -1, -2, 1, 4, 4, 0),\
(1, -4, 1, -1, 2, 4, 0, 2, 1, 1, 0),\
(0, 1, 0, -1, 0, 0, 1, 0, 1, -1, 0),\
(-1, 1, -1, 0, 0, 0, -1, -2, 3, 1, 0),\
(-1, -1, 1, 0, -1, 1, -2, -1, 3, 2, 0),\
(-1, 0, -1, 0, 1, 1, -1, -2, 3, 1, 0),\
(1, 0, 1, 1, 0, -1, -3, -1, 2, 2, 0),\
(1, -1, 1, -1, 0, 1, 0, 0, 2, -1, 0),\
(1, -2, -1, -1, 2, -1, 1, -2, 5, 0, 0)],

#s8
[\
(-1, 0, -1, 0, -1, -1, -1, 0, 5, -1, 0),\
(-3, -1, 3, 0, 1, -1, -3, -1, 3, 5, 0),\
(1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 0),\
(-1, -3, -1, 0, -1, 1, -1, 1, 3, 4, 0),\
(-1, 2, 2, 2, -1, 1, -1, -3, 0, 6, 0),\
(1, 0, -1, -1, 4, 3, 2, 3, -1, -2, 0),\
(2, 0, -1, -1, 0, -1, -3, -1, 4, 2, 0),\
(-4, -1, 1, -2, 3, -1, 1, -2, 4, 4, 0),\
(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, -3, 0, 1, -1, 2, 2, 0),\
(2, -1, -1, 1, 0, 2, 0, 1, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 1, 0, -2, 0, 0),\
(0, 1, 0, 0, 1, 0, 1, 2, -1, -1, 0),\
(-1, -3, 2, 0, -2, -1, -2, 1, 4, 4, 0),\
(1, -4, 1, -1, 2, 4, 0, 2, 1, 1, 0),\
(0, 1, 0, -1, 0, 0, 1, 0, 1, -1, 0),\
(-1, 1, -1, 0, 0, 0, -1, -2, 3, 1, 0),\
(-1, -1, 1, 0, -1, 1, -2, -1, 3, 2, 0),\
(-1, 0, -1, 0, 1, 1, -1, -2, 3, 1, 0),\
(1, 0, 1, 1, 0, -1, -3, -1, 2, 2, 0),\
(1, -1, 1, -1, 0, 1, 0, 0, 2, -1, 0),\
(1, -2, -1, -1, 2, -1, 1, -2, 5, 0, 0)],

#s9
[\
(-1, 0, -1, 0, -1, -1, 0, -1, 5, -1, 0),\
(-3, -1, 3, 0, 1, -1, -1, -3, 3, 5, 0),\
(1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 0),\
(-1, -3, -1, 0, -1, 1, 1, -1, 3, 4, 0),\
(-1, 2, 2, 2, -1, 1, -3, -1, 0, 6, 0),\
(1, 0, -1, -1, 4, 3, 3, 2, -1, -2, 0),\
(2, 0, -1, -1, 0, -1, -1, -3, 4, 2, 0),\
(-3, -1, 1, -2, 2, -1, -2, 1, 4, 3, 0),\
(1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, -3, 0, -1, 1, 2, 2, 0),\
(2, -1, 1, -1, 0, 2, 1, 0, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 0, 1, -2, 0, 0),\
(-1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0),\
(-1, -3, 1, 0, -2, -1, 1, -1, 4, 3, 0),\
(0, 1, 0, -1, 0, 0, 0, 1, 1, -1, 0),\
(-1, 0, -1, 0, 1, 1, 0, -1, 3, -1, 0),\
(1, -1, -1, 1, 0, 1, 0, 0, 2, -1, 0),\
(-1, -1, 1, 0, -1, 1, -1, -2, 3, 2, 0),\
(-1, 1, -1, 0, 0, 0, -2, -1, 3, 1, 0),\
(1, -2, -1, -1, 2, -1, -2, 1, 5, 0, 0),\
(1, 0, 1, 1, 0, -1, -1, 0, 2, -1, 0),\
(-1, 0, 1, 0, 2, 1, 2, 1, -1, 0, 0)],

#s10
[\
(-1, 0, -1, 0, -1, -1, -1, 0, 5, -1, 0),\
(-3, -1, 3, 0, 1, -1, -3, -1, 3, 5, 0),\
(1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 0),\
(-1, -3, -1, 0, -1, 1, -1, 1, 3, 4, 0),\
(-1, 2, 2, 2, -1, 1, -1, -3, 0, 6, 0),\
(1, 0, -1, -1, 4, 3, 2, 3, -1, -2, 0),\
(2, 0, -1, -1, 0, -1, -3, -1, 4, 2, 0),\
(-4, -1, 1, -2, 3, -1, 1, -2, 4, 4, 0),\
(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0),\
(0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0),\
(0, 1, -1, -1, 0, 0, 0, 0, 2, -1, 0),\
(0, -1, 0, 3, -3, 0, 1, -1, 2, 2, 0),\
(2, -1, -1, 1, 0, 2, 0, 1, 1, -1, 0),\
(2, 2, 1, 1, 0, 0, 1, 0, -2, 0, 0),\
(0, 1, 0, 0, 1, 0, 1, 2, -1, -1, 0),\
(-1, -3, 2, 0, -2, -1, -2, 1, 4, 4, 0),\
(1, -4, 1, -1, 2, 4, 0, 2, 1, 1, 0),\
(0, 1, 0, -1, 0, 0, 1, 0, 1, -1, 0),\
(-1, 1, -1, 0, 0, 0, -1, -2, 3, 1, 0),\
(-1, -1, 1, 0, -1, 1, -2, -1, 3, 2, 0),\
(-1, 0, -1, 0, 1, 1, -1, -2, 3, 1, 0),\
(1, 0, 1, 1, 0, -1, -3, -1, 2, 2, 0),\
(1, -1, 1, -1, 0, 1, 0, 0, 2, -1, 0),\
(1, -2, -1, -1, 2, -1, 1, -2, 5, 0, 0)]]

class LBlock():
    def __init__(self):
        self.BlockSize = 64
        self.KeySize = 80

    def genVars_MasterKey(self):
        return ['k' + str(i) for i in range(0, self.KeySize)]
    
    def genVars_after_S9(self, r):
        assert r > 0
        return ['after_S9_' + str(j) + 'Rd' + str(r) for j in range(0, 4)]
    
    def genVars_after_S10(self, r):
        assert r > 0
        return ['after_S10_' + str(j) + 'Rd' + str(r) for j in range(0, 4)]
    
    def genVars_KeyRegister_at_Round(self, r):
        assert (r >= 1 and r <= 32)
        
        if r == 1:
            V = self.genVars_MasterKey()
            return V
           
        if r > 1:
            InVar = self.genVars_KeyRegister_at_Round(r - 1)[29 : 80] \
                  + self.genVars_KeyRegister_at_Round(r - 1)[0  : 29]

            OutVar_1 = self.genVars_after_S10(r - 1)
            OutVar_2 = self.genVars_after_S9(r - 1)
            
            V = OutVar_1 + OutVar_2 + InVar[8 : 80]
            
            return V
            
    def genVars_InVars_KeyRegister_at_Round(self, r):
        #从K2开始才有真正的输入
        assert (r >= 2 and r <= 32)
        
        temp = self.genVars_KeyRegister_at_Round(r - 1)
        Invars = temp[29 : 80] + temp[0 : 29]
        
        return Invars
        
    def genVars_subkey_at_Round(self, r):
        assert (r >= 1 and r <= 32)
        
        subkey = self.genVars_KeyRegister_at_Round(r)[0 : 32]
        
        return subkey
        
    def genVars_InVars_at_Round(self, r):
        assert (r >= 1 and r <= 32)
        
        if r == 1:
            return ['p' + str(j) for j in range(0, 64)]
            
        if r > 1:
            temp = self.genVars_InVars_at_Round(r - 1)

            A = temp[0 : 32]
            B = ['befExchange_' + str(j) + 'Rd' + str(r - 1) for j in range(0, 32)]
            
            temp = A + B

            return (temp[32 : 64] + temp[0 : 32])

    def genVars_before_Exchange_at_Round(self, r):
        assert (r >= 1 and r <= 31)

        temp = self.genVars_InVars_at_Round(r + 1)

        return (temp[32 : 64] + temp[0 : 32])
    
    def genVars_before_F(self, r):
        assert r >= 1
        return ['befFV_' + str(j) + 'Rd' + str(r) for j in range(0, 32)]

    def genVars_after_F(self, r):
        assert r >= 1
        return ['afterFV_' + str(j) + 'Rd' + str(r) for j in range(0, 32)]

    def genVars_before_Perm(self, r):
        assert r >= 1
        
        temp = self.genVars_after_F(r)
        
        V0 = temp[0  :  4]
        V1 = temp[4  :  8]
        V2 = temp[8  : 12]
        V3 = temp[12 : 16]
        V4 = temp[16 : 20]
        V5 = temp[20 : 24]
        V6 = temp[24 : 28]
        V7 = temp[28 : 32]
        
        return (V2 + V0 + V3 + V1 + V6 + V4 + V7 + V5)
        
    def genVars_S_P_0(self, r):
        assert r >= 1
        return ['SP' + str(j) + 'Rd' + str(r) + '_0' for j in range(0, 10)]
        
    def genVars_S_P_1(self, r):
        assert r >= 1
        return ['SP' + str(j) + 'Rd' + str(r) + '_1' for j in range(0, 10)]
          
    def genConstraints_of_Round(self, r):
        assert (r >= 1 and r <= 32)
        constraints = list([])

        #subkey xor in encryption
        x  = self.genVars_InVars_at_Round(r)[0 : 32]
        sk = self.genVars_subkey_at_Round(r)
        y  = self.genVars_before_F(r)
        constraints = constraints + ConstraintGenerator.xorConstraints(x, sk, y)
        
        #Sbox layer in encryption
        S_P_0 = self.genVars_S_P_0(r)
        S_P_1 = self.genVars_S_P_1(r)

        inVs  = self.genVars_before_F(r)
        outVs = self.genVars_before_Perm(r)

        for i in range(0, 8):
            constraints = constraints + ConstraintGenerator.genFromConstraintTemplate(\
                          inVs[4 * i : 4 + 4 * i] + [outVs[4 * i]],\
                          outVs[4 * i + 1 : 4 + 4 * i] + [ S_P_0[7 - i] ] + [ S_P_1[7 - i] ], ST[7 - i])#s8过高位

        #data XOR in encryption
        x = self.genVars_after_F(r)
        y = self.genVars_InVars_at_Round(r)[40 : 64] + self.genVars_InVars_at_Round(r)[32 : 40]
        z = self.genVars_before_Exchange_at_Round(r)[32 : 64]
        constraints = constraints + ConstraintGenerator.xorConstraints(x, y, z)

        # S_box in key scheduling
        if r > 1:
            Invar = self.genVars_InVars_KeyRegister_at_Round(r)

            X = Invar[0 : 4]
            Y = self.genVars_after_S10(r - 1)
            
            constraints = constraints + ConstraintGenerator.genFromConstraintTemplate(X + [Y[0]], \
                          Y[1 : 4] + [ S_P_0[9] ] + [ S_P_1[9] ], ST[9])

            X = Invar[4 : 8]
            Y = self.genVars_after_S9(r - 1)
            constraints = constraints + ConstraintGenerator.genFromConstraintTemplate(X + [Y[0]], \
                          Y[1 : 4] + [ S_P_0[8] ] + [ S_P_1[8] ], ST[8])
            
        return constraints
        
    def genObjectiveFun_to_Round(self, begin, end):
        assert (begin >= 1)
        
        f = list([])
        
        for i in range(begin, end + 1):
            if i == begin:
                for j in range(0, 1):
                    f.append('2 SP' + str(j) + 'Rd' + str(i) + '_0')# + ' + ' \
                             #+ 'SP' + str(j) + 'Rd' + str(i) + '_1')
          #  else :
           #     for j in range(0, 1):
            #        f.append('2 SP' + str(j) + 'Rd' + str(i) + '_0' + ' + ' \
             #                + 'SP' + str(j) + 'Rd' + str(i) + '_1')
        f = ' + '.join(f)
        
        return f

    def genModel(self, begin, end):
        V = set([])
        C = list([])

        for i in range(begin, end + 1):
              C = C + self.genConstraints_of_Round(i)
              
        V = BasicTools.getVariables_From_Constraints(C)

        #add_constraint_1 = ' + '.join(self.genVars_KeyRegister_at_Round(begin)) + ' = 1'#是否相关秘钥
        #add_constraint_3 = ' + '.join(self.genVars_InVars_at_Round(end + 1)) + ' = 0'
        #add_constraint_2 = ' + '.join(['p'+str(i) for i in range(0, 64)]) + ' = 0'
        add_constraint_1 = 'Constrainst 1'
        add_constraint_2 = 'Constrainst 2'
        add_constraint_3 = 'Constrainst 3'
        add_constraint_4 = 'Constrainst 4'
        add_constraint_5 = 'Constrainst 5'
        add_constraint_6 = 'Constrainst 6'
        #V = V.union(BasicTools.getVariables_From_Constraints([add_constraint_1]))
        #V = V.union(BasicTools.getVariables_From_Constraints([add_constraint_2]))
        #V = V.union(BasicTools.getVariables_From_Constraints([add_constraint_3]))
        fp = open("LBlock_imp-" + str(end) + ".lp", "w")
        
        fp.write('Minimize\n')
        fp.write(self.genObjectiveFun_to_Round(begin, end) + '\n')
        
        fp.write('\n' + 'Subject To' + '\n')
        fp.write(add_constraint_1 + '\n')
        fp.write(add_constraint_2 + '\n')
        fp.write(add_constraint_3 + '\n')
        fp.write(add_constraint_4 + '\n')
        fp.write(add_constraint_5 + '\n')
        fp.write(add_constraint_6 + '\n')
        for c in C:
            fp.write(c + '\n')
     
        fp.write('\n' + 'Binary' + '\n')
        for v in V:
            fp.write(v + '\n')

        fp.close()
        
def main():
    print('Initialized...')

if __name__ == '__main__':
    main()
    m = LBlock();m.genModel(1, 16)

